package com.kh.chap01_abstraction.run;

import com.kh.chap01_abstraction.model.vo.Student;

public class AbstractionRun {
	/*
	 * 1. 객체지향언어 : "객체"를 "지향" 하는 언어로 "객체 중심"으로 돌아간다.
	 * 
	 * 2. 객체란 : 현실세계에 독립적으로 존재하는 모든것들을 의미
	 * 			  현실세계에서는 객체들간의 상호작용으로 돌아감
	 * 
	 * 3. 객체지향 프로그래밍 : 현실세계의 객체들간의 상호작용
	 * 						프로그래밍을 통해 가상세계로 구현하는 과정
	 * 
	 * 4. 구현하고자 하는 프로그램상 필요한 객체들을 만들기 위해서
	 * 		: 클래스라는 틀을 먼저 만들어야 함 (클래스란? 각 객체들을 속성들을 담아낼 수 있는 그릇) -> 프로그래밍을 하기 위한 재료를 담는 것
	 * 		>> 만드는 법 -> 추상화 + 캡슐화 접목해서 만듦
	 * 
	 * 5. 추상화 과정
	 * 1) 내가 구현하고자하는 프로그램에서 필요한 객체들을 생각해볼 것 => 쇼핑몰
	 * 2) 그 객체들이 가지는 공통적인 속성, 기능들을 모두 추출 => 이름, 나이, 주소, 휴대폰 번호, mbti, 혈액형, ...)
	 * 3) 추출한 것들을 가지고 내가 구현하고자 했던 프로그램의 "실질적인 목적"에 맞춰 불필요한 속성, 기능들을 제거 한 것 => mbti, 혈액형
	 * 4) 최종적으로 추려진 속성들을 어떤 자료형으로, 어떤 변수명으로 사용할건지 구상
	 * 
	 * ex) 학생 관리 프로그램
	 * 	1) 학생 관련된 객체
	 * 	2) 공통적인 속성 및 기능 (이름, 나이, 주소, 전번, 키 , 몸무게, 달리기속도, 학년, 반, 국어점수, 수학점수, 머리색깔, 발사이즈, ...)
	 * 	3) 학생 "인전사항"을 관리하는 프로그램 : 이름, 나이, 주소, 전번, 학년, 반;
	 * 	   학생 "성정"을 관리하는 프로그램 : 이름, 학년, 반, 국어점수, 수학점수;
	 * 	   학생 "건강"을 관리하는 프로그램 이라고 한다면 : 이름, 학년, 반, 키, 몸무게, 달리기속도;
	 * 
	 * 	   추려진 것 "이름, 나이, 키" 라는 가정
	 * 	4) 이름 : String name;
	 *     나이 : int age;
	 *     키 : double height;
	 *     
	 *	6. 위와 같이 선정된 것들을 가지고 본격적인 프로그래밍 시작
	 *		1) "변수"만을 가지고 프로그래밍을 한다면? -> 변수 : 하나의 자료형에 하나의 값만을 보관
	 * 		차은우라는 학생객체를 만들어내기 위해서는? --> String name1 = "차은우"; int age1 = 20; double height1 = 188.7;
	 * 		장원영라는 학생객체를 만들어내기 위해서는? --> String name2 = "장원영"; int age2 = 20; double height2 = 188.7;
	 *		=> 수백만명의 학생들의 변수를 만들어야함
	 *
	 *		문제 발생 => 수백명에 해당하는 학생들을 만들 때 -> 수천 수만개의 변수가 만들어짐
	 *		
	 *		2) "배열"로 프로그래밍을 한다면?
	 *		* 배열 - 하나의 자료형의 여러개의 값들을 보관 가능
	 *
	 *		학생들의 이름을 보관하는 String[] name = {"차은우", "장원영", ...}
	 *		학생들의 나이를 보관하는 	    int[] age = {20, 21, ...}
	 *		학생들의 키를 보관하는 double[] height = {180.7, 165.5, ...} 
	 *
	 *		문제 발생 => 데이터 지워야할때나, 새로 추가할때 문제되고, 또한 배열 크기가 모자라면 배열 다시 만들어야함
	 *		
	 *		3) 그래서 나온 개념이 구조체
	 *		- 구조체 : 여러 개의 자료형와 값들을 보관 가능
	 *		=> String, int, double 값도 같이 한 번에 보관 가능(나만의 배열 같은 자료형, 이게 클래스라고 함)
	 *
	 *		Student 라는 클래스를 만들다고 가정했을 때
	 *		=> 객체의 정보를 보관할 그릇과도 같은 이런 클래스들은 만들기 위해서
	 *		=> model.vo
	 *
	 *
	 */		

	public static void main(String[] args) {
		// 클래스 만든 후 학생 객체 만들어보기
		
		// 자바에서 객체를 만들기 위해서 new라는 키워드를 통해 먼저 heap 영역에 생성
		Student cha = new Student(); // 객체 생성 구문
		// 주소값을 갖고 있음 -> 기본 자료형이 아니기 때문
		
		//여기 까지는 Heap 영역에 할당된 공간에 JVM의 초기값들이 세팅되어있음
		
		//"직접 접근"해서 내가 원하는 값 대입
		cha.name = "차은우";
		cha.age = 20;
		cha.height = 187.5;
		
		System.out.println(cha ); //주소값나옴
		System.out.println(cha.name);
		System.out.println(cha.age);
		System.out.println(cha.height); //직접 접근
		
		Student chan = new Student();
		chan.name = "박찬형";
		chan.age = 25;
		chan.height = 177;
		
		 System.out.println(chan.name + "님의 나이는 " + chan.age + "살이고, 키는 " + chan.height + "cm 입니다.");
		 
		 /*
		  * 필드를 public 접근제한자로 작성
		  * => 필드에 직접적으로 접근해서 값 대입하거나 값을 가져올 수 있다.
		  * => 외부에서 값을 변질시키서나 조회권한이 없는 사람이 가져올 수 있는 문제 발생
		  * >> 캡슐화 작업
		  */
		
			
		
		
	}
	

}
